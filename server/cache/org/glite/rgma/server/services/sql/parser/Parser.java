/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.glite.rgma.server.services.sql.parser;
import java.util.*;
import org.glite.rgma.server.services.sql.Constant.Type;
import org.glite.rgma.server.services.sql.JoinedTable.*;
import org.glite.rgma.server.services.sql.*;

/**
 * SQL parser for R-GMA.
 */
@SuppressWarnings("all") public class Parser implements ParserConstants {

  final public DataType DataType() throws ParseException {
  Token sn;
  DataType dataType = new DataType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CHAR:
    case K_TIME:
    case K_TIMESTAMP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHAR:
        jj_consume_token(K_CHAR);
        dataType.setType(DataType.Type.CHAR);
        break;
      case K_TIMESTAMP:
        jj_consume_token(K_TIMESTAMP);
        dataType.setType(DataType.Type.TIMESTAMP);
        break;
      case K_TIME:
        jj_consume_token(K_TIME);
        dataType.setType(DataType.Type.TIME);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        jj_consume_token(92);
        sn = jj_consume_token(S_NUMBER);
        dataType.setSize(Integer.parseInt(sn.toString()));
        jj_consume_token(93);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      break;
    case K_VARCHAR:
      jj_consume_token(K_VARCHAR);
      dataType.setType(DataType.Type.VARCHAR);
      jj_consume_token(92);
      sn = jj_consume_token(S_NUMBER);
      dataType.setSize(Integer.parseInt(sn.toString()));
      jj_consume_token(93);
      break;
    case K_INTEGER:
      jj_consume_token(K_INTEGER);
      dataType.setType(DataType.Type.INTEGER);
      break;
    case K_REAL:
      jj_consume_token(K_REAL);
      dataType.setType(DataType.Type.REAL);
      break;
    case K_DOUBLE:
      jj_consume_token(K_DOUBLE);
      jj_consume_token(K_PRECISION);
      dataType.setType(DataType.Type.DOUBLE_PRECISION);
      break;
    case K_DATE:
      jj_consume_token(K_DATE);
      dataType.setType(DataType.Type.DATE);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return dataType;}
    throw new Error("Missing return statement in function");
  }

  final public String Modifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      jj_consume_token(K_NULL);
    {if (true) return "NOT NULL";}
      break;
    case K_PRIMARY:
      jj_consume_token(K_PRIMARY);
      jj_consume_token(K_KEY);
    {if (true) return "PRIMARY KEY";}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* ---------------- DECLARATIONS SECTION ends here ------------------ */
/* ---------------- Code Section starts here ---------------------- */
// ColumnValues ::= TableColumn = UpdatedValue (, TableColumn = UpdatedValue)*
  final public Map < String, ExpressionOrConstant > ColumnValues() throws ParseException {
  Map < String, ExpressionOrConstant > t = new Hashtable < String, ExpressionOrConstant > ();
  String key;
  ExpressionOrConstant val;
    key = TableColumn();
    jj_consume_token(94);
    val = UpdatedValue();
    t.put(key, val);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      jj_consume_token(95);
      key = TableColumn();
      jj_consume_token(94);
      val = UpdatedValue();
      t.put(key, val);
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// UpdatedValue ::= SQLExpression
  final public ExpressionOrConstant UpdatedValue() throws ParseException {
  ExpressionOrConstant e;
    e = SQLExpression();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// UpdateStatement ::= "UPDATE" TableName "SET" SetClauseList
//                     [ "WHERE" SQLExpression ] [";"]
  final public UpdateStatement UpdateStatement() throws ParseException {
  String tableName;
  UpdateStatement us;
  ExpressionOrConstant where;
  Map < String, ExpressionOrConstant > setClauseList;
    jj_consume_token(K_UPDATE);
    tableName = ObjectName();
    us = new UpdateStatement(new TableName(tableName));
    jj_consume_token(K_SET);
    setClauseList = SetClauseList();
    us.setSet(setClauseList);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      jj_consume_token(K_WHERE);
      where = SQLExpression();
      us.setWhere(where);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 96:
      jj_consume_token(96);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    {if (true) return us;}
    throw new Error("Missing return statement in function");
  }

// InsertStatement ::= "INSERT INTO" TableName "(" ColumnName ( "," ColumnName )* ")"//                     "VALUES"  "(" ColumnValue ( "," ColumnValue )* ")" [";"]  final public InsertStatement InsertStatement() throws ParseException {
  TableName tableName;
  String columnName;
  Constant columnValue;
  InsertStatement is;
  List < String > columnNames = new ArrayList < String > (8);
  List < Constant > columnValues = new ArrayList < Constant > (8);
    jj_consume_token(K_INSERT);
    jj_consume_token(K_INTO);
    tableName = TableName();
    is = new InsertStatement(tableName);
    jj_consume_token(92);
    columnName = ColumnName();
    columnNames.add(columnName);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(95);
      columnName = ColumnName();
      columnNames.add(columnName);
    }
    jj_consume_token(93);
    jj_consume_token(K_VALUES);
    jj_consume_token(92);
    columnValue = ColumnValue();
    columnValues.add(columnValue);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(95);
      columnValue = ColumnValue();
      columnValues.add(columnValue);
    }
    jj_consume_token(93);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 96:
      jj_consume_token(96);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    is.setColumnNames(columnNames);
    is.setColumnValues(columnValues);
    {if (true) return is;}
    throw new Error("Missing return statement in function");
  }

// SetClauseList ::= SetClause() ( "," SetClause() )*
// SetClause ::= ObjectName() "=" SQLSimpleExpression()
  final public Map < String, ExpressionOrConstant > SetClauseList() throws ParseException {
  Map < String, ExpressionOrConstant > setClauseList = new HashMap < String, ExpressionOrConstant > ();
  String columnName;
  ExpressionOrConstant updateValue;
    columnName = ObjectName();
    jj_consume_token(94);
    updateValue = SQLSimpleExpression();
    setClauseList.put(columnName, updateValue);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(95);
      columnName = ObjectName();
      jj_consume_token(94);
      updateValue = SQLSimpleExpression();
      setClauseList.put(columnName, updateValue);
    }
    {if (true) return setClauseList;}
    throw new Error("Missing return statement in function");
  }

// QueryStatement ::= SelectStatement() [";"]
  final public SelectStatement QueryStatement() throws ParseException {
  SelectStatement q;
    q = SelectStatement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 96:
      jj_consume_token(96);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

// CreateViewStatement ::= CREATE VIEW ObjectName AS SELECT (ObjectName (, ObjectName)* ) FROM ObjectName [";"]
  final public CreateViewStatement CreateViewStatement() throws ParseException {
  CreateViewStatement cvs;
  String viewName, tableName, columnName;
  List < String > columnNames = new ArrayList < String > ();
    jj_consume_token(K_CREATE);
    jj_consume_token(K_VIEW);
    viewName = ObjectName();
    cvs = new CreateViewStatement(viewName);
    jj_consume_token(K_AS);
    jj_consume_token(K_SELECT);
    columnName = ObjectName();
    cvs.setColumnNames(columnNames);
    columnNames.add(columnName);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(95);
      columnName = ObjectName();
      columnNames.add(columnName);
    }
    jj_consume_token(K_FROM);
    tableName = ObjectName();
    cvs.setTableName(tableName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 96:
      jj_consume_token(96);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    {if (true) return cvs;}
    throw new Error("Missing return statement in function");
  }

// CreateIndexStatement ::= CREATE INDEX ObjectName ON ObjectName (ObjectName (, ObjectName)* ) [";"]
  final public CreateIndexStatement CreateIndexStatement() throws ParseException {
  CreateIndexStatement cis;
  String indexName, tableName, columnName;
  List < String > columnNames = new ArrayList < String > ();
    jj_consume_token(K_CREATE);
    jj_consume_token(K_INDEX);
    indexName = ObjectName();
    cis = new CreateIndexStatement(indexName);
    jj_consume_token(K_ON);
    tableName = ObjectName();
    cis.setTableName(tableName);
    jj_consume_token(92);
    columnName = ObjectName();
    cis.setColumnNames(columnNames);
    columnNames.add(columnName);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      jj_consume_token(95);
      columnName = ObjectName();
      columnNames.add(columnName);
    }
    jj_consume_token(93);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 96:
      jj_consume_token(96);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    {if (true) return cis;}
    throw new Error("Missing return statement in function");
  }

// CreateTableStatement ::= CREATE TABLE ObjectName 
//                          ( ColumnDefinition (, ColumnDefinition)* [PrimaryKeyDefinition] ) [";"]
  final public CreateTableStatement CreateTableStatement() throws ParseException {
  CreateTableStatement cts;
  ColumnDefinition cd;
  String s;
  String tableName;
  List < ColumnDefinition > cds = new ArrayList < ColumnDefinition > ();
  List < String > pks = new ArrayList < String > ();
    jj_consume_token(K_CREATE);
    jj_consume_token(K_TABLE);
    tableName = ObjectName();
    cts = new CreateTableStatement(tableName.toString());
    jj_consume_token(92);
    cd = ColumnDefinition();
    cds.add(cd);
    label_7:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(95);
      cd = ColumnDefinition();
      cds.add(cd);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 95:
      jj_consume_token(95);
      jj_consume_token(K_PRIMARY);
      jj_consume_token(K_KEY);
      jj_consume_token(92);
      s = TableColumn();
      pks.add(s);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        jj_consume_token(95);
        s = TableColumn();
        pks.add(s);
      }
      jj_consume_token(93);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(93);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 96:
      jj_consume_token(96);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    cts.setColumns(cds);
    if (pks.size() > 0)
    {
      cts.setPrimaryKeyColumns(pks);
    }
    {if (true) return cts;}
    throw new Error("Missing return statement in function");
  }

// ColumnDefinition ::= TableColumn DataType Modifier*
  final public ColumnDefinition ColumnDefinition() throws ParseException {
  String s;
  DataType d;
  ColumnDefinition cd = new ColumnDefinition();
    s = TableColumn();
    cd.setName(s);
    d = DataType();
    cd.setType(d);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case K_PRIMARY:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      s = Modifier();
      if (s.equals("NOT NULL"))
      {
        cd.setNotNull(true);
      }
      if (s.equals("PRIMARY KEY"))
      {
        cd.setPrimaryKey(true);
        cd.setNotNull(true);
      }
    }
    {if (true) return cd;}
    throw new Error("Missing return statement in function");
  }

// TableColumn ::= ObjectName [ "." ObjectName ] [ "." ObjectName ]
  final public String TableColumn() throws ParseException {
  StringBuffer buf = new StringBuffer();
  String s;
    // table.column
      s = ObjectName();
    buf.append(s);
    if (jj_2_2(2)) {
      jj_consume_token(97);
      s = ObjectName();
      buf.append("." + s);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 97:
      jj_consume_token(97);
      s = ObjectName();
      buf.append("." + s);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    {if (true) return buf.toString();}
    throw new Error("Missing return statement in function");
  }

// ObjectName ::= <S_IDENTIFIER>
  final public String ObjectName() throws ParseException {
  Token t;
    t = jj_consume_token(S_IDENTIFIER);
    {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

// Relop ::= "=" | "!=" | "#" | "<>" | ">" | ">=" | "<" | "<="
  final public String Relop() throws ParseException {
  Token op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 94:
      op = jj_consume_token(94);
      break;
    case 98:
      op = jj_consume_token(98);
      break;
    case 99:
      op = jj_consume_token(99);
      break;
    case 100:
      op = jj_consume_token(100);
      break;
    case 101:
      op = jj_consume_token(101);
      break;
    case 102:
      op = jj_consume_token(102);
      break;
    case 103:
      op = jj_consume_token(103);
      break;
    case 104:
      op = jj_consume_token(104);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return op.toString();}
    throw new Error("Missing return statement in function");
  }

// ColumnName ::= ObjectName [ "." ObjectName [ "." ObjectName ]]  final public String ColumnName() throws ParseException {
  String name;
  StringBuilder sb = new StringBuilder();
    name = ObjectName();
    sb.append(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 97:
      jj_consume_token(97);
      name = ObjectName();
      sb.append("." + name);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 97:
        jj_consume_token(97);
        name = ObjectName();
        sb.append("." + name);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

// TableName ::= ObjectName "." ObjectName
  final public TableName TableName() throws ParseException {
  String vdbName, tableName;
    vdbName = ObjectName();
    jj_consume_token(97);
    tableName = ObjectName();
    {if (true) return new TableName(vdbName, tableName);}
    throw new Error("Missing return statement in function");
  }

/* --------------- General Productions ends here --------------- */
/* ----------- SQL productions start here ----------------- */
// SelectStatement ::= SelectWithoutOrder [OrderByClause]
  final public SelectStatement SelectStatement() throws ParseException {
  SelectStatement q;
  List < OrderBy > v;
    q = SelectWithoutOrder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER:
      v = OrderByClause();
      q.addOrderBy(v);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

// SelectWithoutOrder ::= SELECT [ ALL | DISTINCT ] SelectList FromClause 
//                        [ WhereClause ] [ GroupByClause ] [ HavingClause ]
  final public SelectStatement SelectWithoutOrder() throws ParseException {
  SelectStatement q = new SelectStatement();
  List < SelectItem > select;
  List < TableReference > from;
  ExpressionOrConstant where = null, e;
  GroupByHaving groupby = null;
    jj_consume_token(K_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
        jj_consume_token(K_ALL);
        break;
      case K_DISTINCT:
        jj_consume_token(K_DISTINCT);
      q.setDistinct(true);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    select = SelectList();
    from = FromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      where = WhereClause();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_GROUP:
      groupby = GroupByClause();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_HAVING:
      jj_consume_token(K_HAVING);
      e = SQLExpression();
      if (groupby == null)
      {
        groupby = new GroupByHaving(new ArrayList < ExpressionOrConstant > ());
      }
      groupby.setHaving(e);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    q.addSelect(select);
    q.addFrom(from);
    q.addWhere(where);
    q.addGroupBy(groupby);
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

// SelectList ::= COUNT(*) | SelectItem (, SelectItem)* | 
//                    COUNT "(" [ ALL | DISTINCT ] <ObjectName> ")"
  final public List < SelectItem > SelectList() throws ParseException {
  List < SelectItem > v = new ArrayList < SelectItem > (8);
  SelectItem elem;
  String s;
  StringBuffer b = new StringBuffer();
  boolean countDistinct = false;
    if (jj_2_3(3)) {
      jj_consume_token(K_COUNT);
      jj_consume_token(92);
      jj_consume_token(105);
      jj_consume_token(93);
    v.add(new SelectItem("COUNT(*)"));
    {if (true) return v;}
    } else if (jj_2_4(2147483647)) {
      elem = SelectItem();
    v.add(elem);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_10;
        }
        jj_consume_token(95);
        elem = SelectItem();
      v.add(elem);
      }
    {if (true) return v;}
    } else if (jj_2_5(3)) {
      jj_consume_token(K_COUNT);
      jj_consume_token(92);
    b.append("COUNT(");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
      b.append("DISTINCT ");
      countDistinct = true;
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      s = ObjectName();
      jj_consume_token(93);
    b.append(s + ")");
    elem = new SelectItem(b.toString());
    elem.setCountDistinct(countDistinct);
    v.add(elem);
    {if (true) return v;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// SelectItem() ::= SQLSimpleExpression [ [AS] Alias ]
  final public SelectItem SelectItem() throws ParseException {
  SelectItem it = new SelectItem();
  ExpressionOrConstant e;
  Token tk;
    e = SQLSimpleExpression();
    it.setExpression(e);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
    case S_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      tk = jj_consume_token(S_IDENTIFIER);
      it.setAlias(tk.toString().trim());
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    {if (true) return it;}
    throw new Error("Missing return statement in function");
  }

// FromClause ::= TableReference (, TableReference)*
  final public List < TableReference > FromClause() throws ParseException {
  List < TableReference > v = new ArrayList < TableReference > (8);
  TableReference f;
    jj_consume_token(K_FROM);
    f = TableReference();
    v.add(f);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_11;
      }
      jj_consume_token(95);
      f = TableReference();
      v.add(f);
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

// TableNameAndAlias ::= TableName [ [AS] Alias ]  final public TableNameAndAlias TableNameAndAlias() throws ParseException {
  String vdbName, tableName;
  TableNameAndAlias tableNameAndAlias;
  Token tk;
    vdbName = ObjectName();
    jj_consume_token(97);
    tableName = ObjectName();
    tableNameAndAlias = new TableNameAndAlias(vdbName, tableName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
    case S_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      tk = jj_consume_token(S_IDENTIFIER);
      tableNameAndAlias.setAlias(tk.toString());
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    {if (true) return tableNameAndAlias;}
    throw new Error("Missing return statement in function");
  }

// TableReference ::= TableNameAndAlias | JoinedTable
// NB: Modified from SQL92 BNF to avoid left recursion
  final public TableReference TableReference() throws ParseException {
  TableReference tableRef;
  TableNameAndAlias tableName;
  JoinedTable joinedTable;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 92:
      jj_consume_token(92);
      tableRef = TableReference();
      jj_consume_token(93);
    {if (true) return tableRef;}
      break;
    case S_IDENTIFIER:
      tableName = TableNameAndAlias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NATURAL:
      case K_UNION:
      case K_FULL:
      case K_LEFT:
      case K_RIGHT:
      case K_INNER:
        joinedTable = JoinedTable();
      joinedTable.setTableRef1(new TableReference(tableName));
      {if (true) return new TableReference(joinedTable);}
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    {if (true) return new TableReference(tableName);}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// JoinedTable ::= [NATURAL] ( INNER | OuterJoinType() [OUTER] | UNION )
//                 JOIN TableReference() [ JoinSpecification ]
  final public JoinedTable JoinedTable() throws ParseException {
  boolean natural = false;
  JoinType joinType = null;
  OuterJoinType outerJoinType = null;
  TableReference tableRef2;
  JoinSpecification joinSpec = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NATURAL:
      jj_consume_token(K_NATURAL);
      natural = true;
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INNER:
      jj_consume_token(K_INNER);
      joinType = JoinType.INNER;
      break;
    case K_FULL:
    case K_LEFT:
    case K_RIGHT:
      outerJoinType = OuterJoinType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OUTER:
        jj_consume_token(K_OUTER);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      joinType = JoinType.OUTER;
      break;
    case K_UNION:
      jj_consume_token(K_UNION);
      joinType = JoinType.UNION;
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(K_JOIN);
    tableRef2 = TableReference();
    if (jj_2_6(2)) {
      joinSpec = JoinSpecification();
    } else {
      ;
    }
    if (outerJoinType == null)
    {
      {if (true) return new JoinedTable(null, tableRef2, natural, joinSpec, joinType);}
    }
    else
    {
      {if (true) return new JoinedTable(null, tableRef2, natural, joinSpec, outerJoinType);}
    }
    throw new Error("Missing return statement in function");
  }

// OuterJoinType ::= "LEFT" | "RIGHT" | "FULL"
  final public OuterJoinType OuterJoinType() throws ParseException {
  OuterJoinType outerJoinType;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_LEFT:
      jj_consume_token(K_LEFT);
      outerJoinType = OuterJoinType.LEFT;
      break;
    case K_RIGHT:
      jj_consume_token(K_RIGHT);
      outerJoinType = OuterJoinType.RIGHT;
      break;
    case K_FULL:
      jj_consume_token(K_FULL);
      outerJoinType = OuterJoinType.FULL;
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return outerJoinType;}
    throw new Error("Missing return statement in function");
  }

// JoinSpecification ::= "ON" SQLExpression() |
//                       "USING" "(" ObjectName() ( "," ObjectName() )* ")"
  final public JoinSpecification JoinSpecification() throws ParseException {
  ExpressionOrConstant exp;
  List < String > columnNames;
  String columnName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ON:
      jj_consume_token(K_ON);
      exp = SQLExpression();
    {if (true) return new JoinSpecification(exp);}
      break;
    case K_USING:
      jj_consume_token(K_USING);
      jj_consume_token(92);
      columnName = ObjectName();
    columnNames = new ArrayList < String > ();
    columnNames.add(columnName);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 95:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_12;
        }
        jj_consume_token(95);
        columnName = ObjectName();
      columnNames.add(columnName);
      }
      jj_consume_token(93);
    {if (true) return new JoinSpecification(columnNames);}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// WhereClause ::= "WHERE" SQLExpression()
  final public ExpressionOrConstant WhereClause() throws ParseException {
  ExpressionOrConstant e;
    jj_consume_token(K_WHERE);
    e = SQLExpression();
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// ProducerPredicate ::= "WHERE" ObjectName() "=" (<S_CHAR_LITERAL> | <S_NUMBER>)
//                       ( "AND" ObjectName() "=" (<S_CHAR_LITERAL> | <S_NUMBER>) )*
  final public ProducerPredicate ProducerPredicate() throws ParseException {
  List < ColumnValue > columnValues = new ArrayList < ColumnValue > ();
  String columnName;
  Token columnValueToken;
  ColumnValue colVal;
    jj_consume_token(K_WHERE);
    columnName = ObjectName();
    jj_consume_token(94);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_CHAR_LITERAL:
      columnValueToken = jj_consume_token(S_CHAR_LITERAL);
      String s = columnValueToken.toString();
      s = s.replace("''", "'");
      s = s.substring(1, s.length() - 1);
      colVal = new ColumnValue(columnName, new Constant(s, Type.STRING));
      columnValues.add(colVal);
      break;
    case S_NUMBER:
      columnValueToken = jj_consume_token(S_NUMBER);
      colVal = new ColumnValue(columnName, new Constant(columnValueToken.toString(), Type.NUMBER));
      columnValues.add(colVal);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_13;
      }
      jj_consume_token(K_AND);
      columnName = ObjectName();
      jj_consume_token(94);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_CHAR_LITERAL:
        columnValueToken = jj_consume_token(S_CHAR_LITERAL);
        String s = columnValueToken.toString();
        s = s.replace("''", "'");
        s = s.substring(1, s.length() - 1);
        colVal = new ColumnValue(columnName, new Constant(s, Type.STRING));
        columnValues.add(colVal);
        break;
      case S_NUMBER:
        columnValueToken = jj_consume_token(S_NUMBER);
        colVal = new ColumnValue(columnName, new Constant(columnValueToken.toString(), Type.NUMBER));
        columnValues.add(colVal);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new ProducerPredicate(columnValues);}
    throw new Error("Missing return statement in function");
  }

// GroupByClause ::= "GROUP" "BY" SQLExpressionList()
  final public GroupByHaving GroupByClause() throws ParseException {
  GroupByHaving g = null;
  List < ExpressionOrConstant > v;
    jj_consume_token(K_GROUP);
    jj_consume_token(K_BY);
    v = SQLExpressionList();
    g = new GroupByHaving(v);
    {if (true) return g;}
    throw new Error("Missing return statement in function");
  }

// OrderByClause ::= "ORDER" "BY" SQLSimpleExpression() ["ASC" | "DESC"]
//                   ( "," SQLSimpleExpression() ["ASC" | "DESC"] )*
  final public List < OrderBy > OrderByClause() throws ParseException {
  List < OrderBy > v = new ArrayList < OrderBy > ();
  ExpressionOrConstant e;
  OrderBy ob;
    jj_consume_token(K_ORDER);
    jj_consume_token(K_BY);
    e = SQLSimpleExpression();
    ob = new OrderBy(e);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
        jj_consume_token(K_ASC);
        break;
      case K_DESC:
        jj_consume_token(K_DESC);
      ob.setAscOrder(false);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    v.add(ob);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_14;
      }
      jj_consume_token(95);
      e = SQLSimpleExpression();
      ob = new OrderBy(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
      case K_DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ASC:
          jj_consume_token(K_ASC);
          break;
        case K_DESC:
          jj_consume_token(K_DESC);
        ob.setAscOrder(false);
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      v.add(ob);
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

// SQLExpression ::= SQLAndExpression() ( "OR" SQLAndExpression() )*
  final public ExpressionOrConstant SQLExpression() throws ParseException {
  ExpressionOrConstant e1, e2;
  Expression e = null;
  boolean single = true;
    e1 = SQLAndExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_15;
      }
      jj_consume_token(K_OR);
      e2 = SQLAndExpression();
      if (single)
      {
        e = new Expression("OR", e1);
      }
      single = false;
      e.addOperand(e2);
    }
    {if (true) return (single ? e1 : e);}
    throw new Error("Missing return statement in function");
  }

// SQLAndExpression ::= SQLUnaryLogicalExpression() ( "AND" SQLUnaryLogicalExpression() )*
  final public ExpressionOrConstant SQLAndExpression() throws ParseException {
  ExpressionOrConstant e1, e2;
  Expression e = null;
  boolean single = true;
    e1 = SQLUnaryLogicalExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_16;
      }
      jj_consume_token(K_AND);
      e2 = SQLUnaryLogicalExpression();
      if (single)
      {
        e = new Expression("AND", e1);
      }
      single = false;
      e.addOperand(e2);
    }
    {if (true) return (single ? e1 : e);}
    throw new Error("Missing return statement in function");
  }

// SQLUnaryLogicalExpression ::= ["NOT"] SQLRelationalExpression()
  final public ExpressionOrConstant SQLUnaryLogicalExpression() throws ParseException {
  ExpressionOrConstant e1;
  boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      not = true;
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    e1 = SQLRelationalExpression();
    if (not)
    {
      {if (true) return new Expression("NOT", e1);}
    }
    else
    {
      {if (true) return e1;}
    }
    throw new Error("Missing return statement in function");
  }

// SQLRelationalExpression ::= ( "(" SQLExpressionList() ")" | SQLSimpleExpression() )
//                             [ SQLRelationalOperatorExpression() | SQLInClause() | SQLBetweenClause() |
//                               SQLLikeClause() | IsNullClause() ]
  final public ExpressionOrConstant SQLRelationalExpression() throws ParseException {
  ExpressionOrConstant eleft;
  Expression eright = null;
  List < ExpressionOrConstant > v;
    if (jj_2_7(2147483647)) {
      jj_consume_token(92);
      v = SQLExpressionList();
      jj_consume_token(93);
      eleft = new Expression(",");
      ((Expression) eleft).setOperands(v);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AVG:
      case K_COUNT:
      case K_MAX:
      case K_MIN:
      case K_NULL:
      case K_SUM:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case 92:
      case 106:
      case 107:
        eleft = SQLSimpleExpression();
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_IS:
    case K_LIKE:
    case K_NOT:
    case 94:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 94:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
        eright = SQLRelationalOperatorExpression();
        break;
      default:
        jj_la1[58] = jj_gen;
        if (jj_2_8(2)) {
          eright = SQLInClause();
        } else if (jj_2_9(2)) {
          eright = SQLBetweenClause();
        } else if (jj_2_10(2)) {
          eright = SQLLikeClause();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_IS:
            eright = IsNullClause();
            break;
          default:
            jj_la1[59] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    if (eright == null)
    {
      {if (true) return eleft;}
    }
    List < ExpressionOrConstant > v2 = eright.getOperands();
    if (v2 == null)
    {
      v2 = new ArrayList < ExpressionOrConstant > (); // For IS NULL, which is unary!
    }
    v2.add(0, eleft);
    eright.setOperands(v2);
    {if (true) return eright;}
    throw new Error("Missing return statement in function");
  }

// SQLExpressionList ::= SQLSimpleExpression() ( "," SQLSimpleExpression() )*
  final public List < ExpressionOrConstant > SQLExpressionList() throws ParseException {
  List < ExpressionOrConstant > v = new ArrayList < ExpressionOrConstant > (8);
  ExpressionOrConstant e;
    e = SQLSimpleExpression();
    v.add(e);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 95:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_17;
      }
      jj_consume_token(95);
      e = SQLSimpleExpression();
      v.add(e);
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

// SQLRelationalOperatorExpression ::= Relop() ( SQLSimpleExpression() )
  final public Expression SQLRelationalOperatorExpression() throws ParseException {
  Expression e;
  ExpressionOrConstant eright;
  String op;
    op = Relop();
    e = new Expression(op);
    eright = SQLSimpleExpression();
    e.addOperand(eright);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// SQLInClause ::= ["NOT"] "IN" "(" ( SQLExpressionList() ) ")"
  final public Expression SQLInClause() throws ParseException {
  Expression e;
  boolean not = false;
  List < ExpressionOrConstant > v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      not = true;
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    e = new Expression(not ? "NOT IN" : "IN");
    jj_consume_token(92);
    v = SQLExpressionList();
      e.setOperands(v);
    jj_consume_token(93);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// SQLBetweenClause ::= ["NOT"] "BETWEEN" SQLSimpleExpression() "AND" SQLSimpleExpression()
  final public Expression SQLBetweenClause() throws ParseException {
  Expression e;
  ExpressionOrConstant e1, e2;
  boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      not = true;
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    e1 = SQLSimpleExpression();
    jj_consume_token(K_AND);
    e2 = SQLSimpleExpression();
    if (not)
    {
      e = new Expression("NOT BETWEEN", e1, e2);
    }
    else
    {
      e = new Expression("BETWEEN", e1, e2);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// SQLLikeClause ::= ["NOT"] "LIKE" SQLSimpleExpression()
  final public Expression SQLLikeClause() throws ParseException {
  ExpressionOrConstant eright;
  Expression e;
  boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      not = true;
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    eright = SQLSimpleExpression();
    if (not)
    {
      e = new Expression("NOT LIKE", eright);
    }
    else
    {
      e = new Expression("LIKE", eright);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// IsNullClause ::= "IS" ["NOT"] "NULL"
  final public Expression IsNullClause() throws ParseException {
  boolean not = false;
    jj_consume_token(K_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      not = true;
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    jj_consume_token(K_NULL);
    {if (true) return (not ? new Expression("IS NOT NULL") : new Expression("IS NULL"));}
    throw new Error("Missing return statement in function");
  }

// SQLSimpleExpression ::= SQLMultiplicativeExpression() 
//                         ( ( "+" | "-" | "||" ) SQLMultiplicativeExpression() )*
  final public ExpressionOrConstant SQLSimpleExpression() throws ParseException {
  Token op;
  ExpressionOrConstant e1, e2;
  Expression e = null;
    e1 = SQLMultiplicativeExpression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
      case 107:
      case 108:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        op = jj_consume_token(106);
        break;
      case 107:
        op = jj_consume_token(107);
        break;
      case 108:
        op = jj_consume_token(108);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = SQLMultiplicativeExpression();
      e = new Expression(op.toString(), e1);
      e.addOperand(e2);
      e1 = e;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// SQLMultiplicativeExpression ::= SQLExponentExpression()
//                                 ( ( "*" | "/" ) SQLExponentExpression() )*
  final public ExpressionOrConstant SQLMultiplicativeExpression() throws ParseException {
  Token op;
  ExpressionOrConstant e1, e2;
  Expression e = null;
    e1 = SQLExponentExpression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 105:
      case 109:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 105:
        op = jj_consume_token(105);
        break;
      case 109:
        op = jj_consume_token(109);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = SQLExponentExpression();
      e = new Expression(op.toString(), e1);
      e.addOperand(e2);
      e1 = e;
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// SQLExponentExpression ::= SQLUnaryExpression() ("**" SQLUnaryExpression())*
  final public ExpressionOrConstant SQLExponentExpression() throws ParseException {
  Token op;
  ExpressionOrConstant e1, e2;
  Expression e = null;
  boolean single = true;
    e1 = SQLUnaryExpression();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 110:
        ;
        break;
      default:
        jj_la1[70] = jj_gen;
        break label_20;
      }
      op = jj_consume_token(110);
      e2 = SQLUnaryExpression();
      if (single)
      {
        e = new Expression(op.toString(), e1);
      }
      single = false;
      e.addOperand(e2);
    }
    {if (true) return (single ? e1 : e);}
    throw new Error("Missing return statement in function");
  }

// SQLUnaryExpression ::= [ "+" | "-" ] SQLPrimaryExpression()
  final public ExpressionOrConstant SQLUnaryExpression() throws ParseException {
  Token op = null;
  ExpressionOrConstant e1, e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
    case 107:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        op = jj_consume_token(106);
        break;
      case 107:
        op = jj_consume_token(107);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    e1 = SQLPrimaryExpression();
    if (op == null)
    {
      e = e1;
    }
    else
    {
      e = new Expression(op.toString(), e1);
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

// SQLPrimaryExpression ::= "NULL" | OuterJoineExpression() | "COUNT" "(" "*" ")" |
//                          AggregateFunc() | TableColumn() | <S_NUMBER> | <S_CHAR_LITERAL> |
//                          <S_BIND> | "(" SQLExpression() ")"
  final public ExpressionOrConstant SQLPrimaryExpression() throws ParseException {
  Token t;
  String s, s2;
  ExpressionOrConstant e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
      jj_consume_token(K_NULL);
    {if (true) return new Constant("NULL", Type.NULL);}
      break;
    default:
      jj_la1[73] = jj_gen;
      if (jj_2_11(2147483647)) {
        OuterJoinExpression();
    {if (true) return new Expression("_NOT_SUPPORTED");} //TBD

      } else if (jj_2_12(3)) {
        jj_consume_token(K_COUNT);
        jj_consume_token(92);
        jj_consume_token(105);
        jj_consume_token(93);
    {if (true) return new Expression("COUNT", new Constant("*", Type.COLUMN_NAME));}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AVG:
        case K_COUNT:
        case K_MAX:
        case K_MIN:
        case K_SUM:
          s = AggregateFunc();
          jj_consume_token(92);
          s2 = TableColumn();
          jj_consume_token(93);
    {if (true) return new Expression(s, new Constant(s2, Type.COLUMN_NAME));}
          break;
        case S_IDENTIFIER:
          s = TableColumn();
    {if (true) return new Constant(s, Type.COLUMN_NAME);}
          break;
        case S_NUMBER:
          t = jj_consume_token(S_NUMBER);
    {if (true) return new Constant(t.toString(), Type.NUMBER);}
          break;
        case S_CHAR_LITERAL:
          t = jj_consume_token(S_CHAR_LITERAL);
    s = t.toString();
    s = s.replace("''", "'");
    s = s.substring(1, s.length() - 1);
    {if (true) return new Constant(s, Type.STRING);}
          break;
        case S_BIND:
          t = jj_consume_token(S_BIND);
    {if (true) return new Constant(t.toString(), Type.STRING);}
          break;
        case 92:
          jj_consume_token(92);
          e = SQLExpression();
          jj_consume_token(93);
    {if (true) return e;}
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// ColumnValue ::= "NULL" | <S_NUMBER> | <S_CHAR_LITERAL>  final public Constant ColumnValue() throws ParseException {
  Token t;
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
      jj_consume_token(K_NULL);
    {if (true) return new Constant("NULL", Type.NULL);}
      break;
    case S_NUMBER:
    case 106:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      t = jj_consume_token(S_NUMBER);
    {if (true) return new Constant(t.toString(), Type.NUMBER);}
      break;
    case 107:
      jj_consume_token(107);
      t = jj_consume_token(S_NUMBER);
    {if (true) return new Constant("-" + t.toString(), Type.NUMBER);}
      break;
    case S_CHAR_LITERAL:
      t = jj_consume_token(S_CHAR_LITERAL);
    s = t.toString();
    s = s.replace("''", "'");
    s = s.substring(1, s.length() - 1);
    {if (true) return new Constant(s, Type.STRING);}
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// AggregateFunc ::= "SUM" | "AVG" | "MAX" | "MIN" | "COUNT"
  final public String AggregateFunc() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SUM:
      t = jj_consume_token(K_SUM);
      break;
    case K_AVG:
      t = jj_consume_token(K_AVG);
      break;
    case K_MAX:
      t = jj_consume_token(K_MAX);
      break;
    case K_MIN:
      t = jj_consume_token(K_MIN);
      break;
    case K_COUNT:
      t = jj_consume_token(K_COUNT);
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

// OuterJoinExpression ::= ObjectName() [ "." ObjectName() [ "." ObjectName() ] ] "(" "+" ")"
  final public void OuterJoinExpression() throws ParseException {
    ObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 97:
      jj_consume_token(97);
      ObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 97:
        jj_consume_token(97);
        ObjectName();
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    jj_consume_token(92);
    jj_consume_token(106);
    jj_consume_token(93);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(K_USING)) return true;
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(S_BIND)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(K_COUNT)) return true;
    if (jj_scan_token(92)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(S_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(92)) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(K_COUNT)) return true;
    if (jj_scan_token(92)) return true;
    if (jj_scan_token(105)) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(K_COUNT)) return true;
    if (jj_scan_token(92)) return true;
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(92)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_75()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(110)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(97)) return true;
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    if (jj_scan_token(106)) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    }
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(92)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[80];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x0,0x82000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400020,0x400020,0x0,0x8000000,0x10000000,0x0,0x400020,0x400020,0x80,0x80,0x0,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x200100,0x200100,0x0,0x200100,0x200100,0x0,0x40,0x0,0x20400,0x0,0x0,0x20000800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20400,0x0,0x0,0x20400,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x80080001,0x10200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10200,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000100,0x0,0x100,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x200,0x4000860,0x0,0x4,0x20c,0x0,0x200,0x200,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x4000060,0x0,0x800,0x4000060,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x60,0x10000000,0xe0,0x0,0x80000000,0x2,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x80000000,0x0,0x0,0x0,0x800000,0x80000000,0x0,0x800000,0xb200,0x10800000,0x0,0x4000,0xb200,0x3200,0x80000000,0x10800,0x8020000,0x0,0x8020000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x1c820000,0x40000000,0x0,0x40000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c820000,0x0,0x8020000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x0,0x1,0x0,0x2,0x1fc,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00,0x1fc,0x0,0x1fc,0x0,0x0,0x0,0x0,0x0,0x1c00,0x1c00,0x2200,0x2200,0x4000,0xc00,0xc00,0x0,0x0,0x400,0xc00,0x0,0x2,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial") static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[111];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 80; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 111; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

 }
